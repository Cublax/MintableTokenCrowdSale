{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","i","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","totalSupply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KycContract","listenToTokenTransfer","setState","updateUserTokens","getTotalSupply","alert","error","methods","balanceOf","call","events","Transfer","to","on","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleInputChange","event","target","type","checked","name","handleKycWhitelisting","setKycCompleted","this","className","display","textColor","subtitle","textAlign","size","src","marginless","breakpoint","Column","Field","align","kind","Control","fullwidth","Input","onChange","placeholder","color","onClick","path","mdiPlus","mdiCircleMultiple","href","rounded","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4db4619.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\nimport 'bulma/css/bulma.min.css';\nimport MyToken from './contracts/MyToken.json';\nimport MyTokenSale from './contracts/MyTokenSale.json';\nimport KycContract from './contracts/KycContract.json';\nimport {\n  Box,\n  Button,\n  Columns,\n  Container,\n  Form,\n  Heading,\n  Block,\n  Image,\n} from 'react-bulma-components';\nimport getWeb3 from './getWeb3';\nimport Icon from '@mdi/react';\nimport { mdiCircleMultiple, mdiPlus } from '@mdi/js';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    kycAddress: '',\n    tokenSaleAddress: null,\n    userTokens: 0,\n    totalSupply: 0,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n\n      this.tokenInstance = new this.web3.eth.Contract(\n        MyToken.abi,\n        MyToken.networks[this.networkId] &&\n          MyToken.networks[this.networkId].address\n      );\n\n      this.tokenSaleInstance = new this.web3.eth.Contract(\n        MyTokenSale.abi,\n        MyTokenSale.networks[this.networkId] &&\n          MyTokenSale.networks[this.networkId].address\n      );\n      this.kycInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] &&\n          KycContract.networks[this.networkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      this.setState(\n        {\n          loaded: true,\n          tokenSaleAddress: MyTokenSale.networks[this.networkId].address,\n        },\n        this.updateUserTokens\n      );\n      this.getTotalSupply();\n      //let totalSupply = await this.tokenInstance.methods.totalSupply();\n      //this.setState({ totalSupply: totalSupply });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  updateUserTokens = async () => {\n    let userTokens = await this.tokenInstance.methods\n      .balanceOf(this.accounts[0])\n      .call();\n    this.setState({ userTokens: userTokens });\n  };\n\n  listenToTokenTransfer = () => {\n    this.tokenInstance.events\n      .Transfer({ to: this.accounts[0] })\n      .on('data', this.updateUserTokens);\n  };\n\n  handleBuyTokens = async () => {\n    await this.tokenSaleInstance.methods.buyTokens(this.accounts[0]).send({\n      from: this.accounts[0],\n      value: this.web3.utils.toWei('1', 'wei'),\n    });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleKycWhitelisting = async () => {\n    await this.kycInstance.methods\n      .setKycCompleted(this.state.kycAddress)\n      .send({ from: this.accounts[0] });\n    alert('KYC for ' + this.state.kycAddress + ' is completed');\n  };\n\n  getTotalSupply = async () => {\n    let totalSupply = await this.tokenInstance.methods.totalSupply().call();\n    this.setState({ totalSupply: totalSupply });\n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return (\n        <Container textAlign='center'>\n          <div className='m-4'>\n            <Image\n              display='inline-block'\n              rounded\n              size={64}\n              src='img/metamask.svg'\n            />\n            <Heading>Connecting with Metamask...</Heading>\n            <p>Make sure to select Goerli Test Network</p>\n          </div>\n        </Container>\n      );\n    }\n    return (\n      <Container>\n        <div className='App m-4 has-text-centered'>\n          <Box display='inline-block' className='main-box'>\n            <Heading\n              textColor='success'\n              subtitle\n              className='text-wide uppercase'\n            >\n              Total token supply: <b>{this.state.totalSupply}</b>\n            </Heading>\n            <Block textAlign='center'>\n              <Image\n                display='inline-block'\n                size={64}\n                src='img/cube.svg'\n              />\n            </Block>\n            <Heading marginless>Cublax Mintable Token Sale</Heading>\n            <p className='is-size-4 mb-4'>Get your Cub today!</p>\n            <Columns breakpoint='tablet'>\n              <Columns.Column>\n                <div className='subheader-line'>\n                  <h2>KYC Whitelisting</h2>\n                </div>\n                <p className='mb-6'>\n                  In order to any account to mint <b>CUB</b>, it must be\n                  whitelisted beforehand.\n                </p>\n                <Form.Field align='center' kind='group'>\n                  <Form.Control fullwidth>\n                    <Form.Input\n                      name='kycAddress'\n                      value={this.state.kycAddress}\n                      onChange={this.handleInputChange}\n                      placeholder='Address to allow'\n                      type='text'\n                    ></Form.Input>\n                  </Form.Control>\n                  <Form.Control>\n                    <Button\n                      color='success'\n                      onClick={this.handleKycWhitelisting}\n                    >\n                      <Icon path={mdiPlus} size={1}></Icon>&nbsp;Add to\n                      Whitelist\n                    </Button>\n                  </Form.Control>\n                </Form.Field>\n              </Columns.Column>\n              <Columns.Column>\n                <div className='subheader-line'>\n                  <h2>Buy Tokens</h2>\n                </div>\n                <p className='is-size-4'>You currently have </p>\n                <span className='is-size-2 has-text-success has-text-weight-bold'>\n                  {this.state.userTokens}\n                </span>\n                <p className='is-size-4'>\n                  <b>CUB</b> Tokens\n                </p>\n                <p className='has-text-grey'>\n                  If you want to buy tokens, send Wei to this address:\n                  <br />\n                  <b>{this.state.tokenSaleAddress}</b>\n                </p>\n                <h4 className='is-size-4 my-4'>OR</h4>\n                <Button color='success' onClick={this.handleBuyTokens}>\n                  <Icon path={mdiCircleMultiple} size={1}></Icon>&nbsp; Buy more\n                  tokens\n                </Button>\n              </Columns.Column>\n            </Columns>\n          </Box>\n          <p>Educational dApp deployed in Test Network.</p>\n          <p>\n            Modified by{' '}\n            <a href='https://github.com/Cublax/MintableTokenCrowdSale' target='_blank'>\n              Cublax\n            </a>\n            . Original assignment for the{' '}\n            <a\n              href='https://www.udemy.com/course/blockchain-developer/'\n              target='_blank'\n            >\n              Ethereum Solidity Developer Bootcamp\n            </a>\n            .\n          </p>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}